#! /usr/bin/bash

# the name of the project
PROJECT="catvibes"

# the path to the sourcefiles from the project root (where the script should be run)
SRCPATH="src/$PROJECT"
# pyinstaller python libs to collect fully (e.g. ytmusicapi)
COLLECTALL="ytmusicapi"
# additional data to include
ADDDATA="$SRCPATH/config:$PROJECT"
# hidden imports (sometimes pyinstaller does not work without those)
HIDDENIMPORT="yt_dlp.utils._deprecated"
# python modules used
PYTHONMODULES="pyqt6 yt-dlp ytmusicapi eyeD3 python-vlc"
# bonus pyinstaller args
ARGS="--onefile --log-level WARN"


# colors for pretty output
BLUE='\033[0;34m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NOCOLOR='\033[0m'

# prettier echo
info(){
    echo -e "$BLUE $* $NOCOLOR"
}

# exit with errorcode and print errormessage
error(){
    CODE=$1
    shift
    echo -e "$RED $* $NOCOLOR" >&2
    exit "$CODE"
}

# clears up pyinstaller files
clearup(){
    rm -rf dist
    rm -rf build
    rm $PROJECT.spec
}

# runs a command and also prints it
run() {
    echo -e "$GREEN running $* $NOCOLOR"
    COMMAND=$1
    shift
    $COMMAND "$@"
}

# appends a prefix to all members of a list
prefix(){
    PREFIX=$1
    shift
    NEWLINE=""
    for arg in "$@"
    do
        NEWLINE="$NEWLINE $PREFIX $arg"
    done
    echo "$NEWLINE"
}

BUILDWIN=true
BUILDLINUX=true

if [[ ! $(echo "$@" | grep -e "win") == "" ]]; then
    BUILDLINUX=false
fi
if [[ ! $(echo "$@" | grep -e "linux") == "" ]]; then
    BUILDWIN=false
fi

COLLECTALL=$(prefix --collect-all $COLLECTALL)
ADDDATA=$(prefix --add-data $ADDDATA)
WIN_ADDDATA=$(prefix --add-data $WIN_ADDDATA)
HIDDENIMPORT=$(prefix --hidden-import $HIDDENIMPORT)

for file in $(find Windows_binaries/*)
do
    WINIMPORT="$WINIMPORT $file:."
done

# additional binaries for windows
WINIMPORT=$(prefix --add-binary $WINIMPORT)

clearup

info "building Project $PROJECT at $PWD$SRCPATH"
info "Dependencies: $PYTHONMODULES"


info moving previous executables to executables_old folder
run mv executables executables_old 
mkdir executables &>/dev/null

if [[ "$BUILDLINUX" == "true" ]]; then
    run virtualenv -q build_env

    # command to pip all the dependencies
    PIPINSTALL="pip install --upgrade -q pyinstaller pyinstaller-hooks-contrib $PYTHONMODULES"
    # the pyinstaller command for Linux
    PYINSTALLER="pyinstaller --name=$PROJECT $COLLECTALL $ADDDATA $HIDDENIMPORT $ARGS $SRCPATH/__main__.py"
    info starting Linux build

    source build_env/bin/activate
    info installing python modules
    run $PIPINSTALL
    info running pyinstaller
    run $PYINSTALLER || error 1 "error in Linux build"
    deactivate

    run rm -rf build_env

    info finished Linux build

    info saving executable to executables dir
    run mv dist/$PROJECT executables

    clearup
else
    info skipping linux build
fi


if [[ "$BUILDWIN" == "true" ]]; then
    info starting Windows buildi
    # pyinstaller command for Windows
    PYINSTALLER_WIN="pyinstaller --name=$PROJECT $COLLECTALL $ADDDATA $HIDDENIMPORT $WINIMPORT $ARGS $SRCPATH/__main__.py"

    # for the following wine command I used Winetricks (~/Wine/ is a symlink to ~/.local/share/wineprefixes) and installed python (3.11.8) and vlc (3.20) via their official websites
    WINEPREFIX=~/Wine/Development WINEDEBUG=fixme-all run wine cmd /c cd $PWD \& $PIPINSTALL \& $PYINSTALLER_WIN || error 1 "error in Windows build. Is a correct Wineprefix setup at HOME/Wine/Development?"

    info finished Windows build

    info saving executable to executables dir
    if [[ ! "" == "$(echo $PYINSTALLER_WIN | grep -e "--onefile")" ]]; then
        run mv dist/$PROJECT.exe executables
    else
        run mv dist/$PROJECT executables/win_$PROJECT
    fi

    clearup

else
    info skipping windows build
fi

if  [[ $BUILDLINUX == "false" ]]; then
    info using old linux executable
    run mv executables_old/$PROJECT executables
fi
if  [[ $BUILDWIN == "false" ]]; then
    info using old windows executable
    run mv executables_old/$PROJECT.exe executables
fi

info deleting old executables as nothing failed
run rm -rf executables_old